#include <bits/stdc++.h>
using namespace std;

/*
二进制右移操作是将一个二进制数向右移动指定的位数。在右移过程中，原来位于右侧的位将被丢弃，左侧则根据右移的位数填充相应的值。

以下是一个关于二进制右移操作的示例：

假设有一个二进制数 101101（十进制为 45），我们对其进行右移操作。

1. 右移 1 位：101101 右移 1 位变为 10110。最右侧的位被丢弃，左侧用原来的最右侧位（即原来的倒数第二位）填充。

2. 右移 2 位：101101 右移 2 位变为 1011。最右侧的两位被丢弃，左侧用原来的最右侧位（即原来的倒数第三位）填充。

3. 右移 3 位：101101 右移 3 位变为 101。最右侧的三位被丢弃，左侧用原来的最右侧位（即原来的倒数第四位）填充。

注意，在右移过程中，左侧填充的位数取决于右移的位数。如果右移的位数超过了二进制数的位数，那么结果将变为全0。

例如，对于二进制数 101101（十进制为 45），右移 4 位会使得所有的位都被丢弃，结果为 0。

请注意，右移操作适用于带符号数和无符号数。对于带符号数，右移操作会保留符号位，即正数填充0，负数填充1。而对于无符号数，右移操作只是简单地将位右移，并用0填充左侧。
举出10个右移操作的例子：
以下是对一个二进制数进行右移操作的十个例子：

1. 原始数：101010，右移 1 位，结果：010101
2. 原始数：110011，右移 2 位，结果：001100
3. 原始数：111000，右移 3 位，结果：000111
4. 原始数：101010，右移 4 位，结果：000010
5. 原始数：1001101，右移 1 位，结果：0100110
6. 原始数：1100100，右移 2 位，结果：0011001
7. 原始数：1110001，右移 3 位，结果：0001110
8. 原始数：1010101，右移 4 位，结果：0000101
9. 原始数：1100110，右移 5 位，结果：0000011
10. 原始数：1110000，右移 6 位，结果：0000001

这些例子展示了不同的二进制数进行右移操作后得到的结果。注意，在每次右移操作中，原始数的每一位都向右移动指定的位数，并根据右移的位数在左侧填充相应的值。
*/
class Solution {

public:
	//本题涉及到异或操作、右移操作的性质和计算方法
	int hammingDistance(int x, int y) {
		int count = 0;
		int z = x ^ y;
		while (z!=0)
		{
			if ((z & 1) == 1) count++;
			// >> 右移符号、<<左移符号
			z >>= 1;
		}
		return count;
	}
};

int main() {
	Solution s;
	
	cout << s.a("") << endl;
	return 0;
}